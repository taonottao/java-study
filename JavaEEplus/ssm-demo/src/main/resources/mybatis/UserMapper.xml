<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ssmdemo.mapper.UserMapper">

    <resultMap id="baseMap" type="com.example.ssmdemo.entity.Userinfo">
        <id column="id" property="id"></id>
        <result column="username" property="name"></result>
        <result column="password" property="password"></result>
        <result column="photo" property="photo"></result>
        <result column="createtime" property="createtime"></result>
        <result column="updatetime" property="updatetime"></result>
        <result column="state" property="state"></result>
    </resultMap>

    <select id="getUserById" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo where id = #{id}
    </select>

    <select id="getUserByName" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo where username  = ${username}
    </select>

<!--    <select id="getAll" resultMap="baseMap">-->
<!--        select * from userinfo-->
<!--    </select>-->

    <select id="getAll" resultType="com.example.ssmdemo.entity.Userinfo">
        select id, username as name,password,photo,createtime,updatetime,state from userinfo
    </select>

    <insert id="add">
        insert into userinfo(username, password, createtime, updatetime)
        values (#{username}, #{password}, #{createtime}, #{updatetime})
    </insert>

    <insert id="addGetId" useGeneratedKeys="true" keyProperty="id">
        insert into userinfo(username, password, createtime, updatetime)
        values (#{username}, #{password}, #{createtime}, #{updatetime})
    </insert>

    <update id="upUserName">
        update userinfo set username=#{username} where id = #{id}
    </update>

    <delete id="delById">
        delete from userinfo where id = #{id}
    </delete>

    <select id="getListByOrder" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo order by id ${order}
    </select>

    <select id="login" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo where username='${username}' and password='${password}'
    </select>

    <select id="getListByName" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo where username like concat('%', #{username}, '%')
    </select>

    <insert id="add2">
        insert into userinfo(username,password
        <if test="photo!=null">
            ,photo
        </if>
        )
        values (#{username},#{password}
        <if test="photo!=null">
            ,#{photo}
        </if>
        )
    </insert>

    <insert id="add3">
        insert into userinfo
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username!=null">
                username,
            </if>
            <if test="password!=null">
                password,
            </if>
            <if test="photo!=null">
                photo,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username!=null">
                #{username},
            </if>
            <if test="password!=null">
                #{password},
            </if>
            <if test="photo!=null">
                #{photo},
            </if>
        </trim>


    </insert>

    <select id="getListByParam" resultType="com.example.ssmdemo.entity.Userinfo">
        select * from userinfo
            <trim prefix="where" prefixOverrides="and">
                <if test="username!=null">
                    username=#{username}
                </if>
                <if test="password!=null">
                    and password=#{password}
                </if>
            </trim>
<!--        <where>-->
<!--            <if test="username!=null">-->
<!--                username=#{username}-->
<!--            </if>-->
<!--            <if test="password!=null">-->
<!--                and password=#{password}-->
<!--            </if>-->
<!--        </where>-->
    </select>

    <update id="update2">
        update userinfo
        <set>
            <if test="username!=null">
                usename=#{username},
            </if>
            <if test="password!=null">
                password=#{password},
            </if>
            <if test="photo!=null">
                photo=#{photo},
            </if>
        </set>
        where id=#{id}
    </update>

    <delete id="dels">
        delete from userinfo where id in
        <foreach collection="ids" open="(" close=")" item="id" separator=",">
            #{id}
        </foreach>
    </delete>

</mapper>